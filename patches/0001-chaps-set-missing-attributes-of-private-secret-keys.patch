From 9d3592aae72ed12ba3616b4d3bd72dcc9303c7bf Mon Sep 17 00:00:00 2001
From: David Drysdale <drysdale@google.com>
Date: Fri, 1 May 2015 17:34:06 +0100
Subject: [PATCH] chaps: set missing attributes of private/secret keys

For private/secret keys that are created from external data
with CreateObject:
 - The CKA_KEY_GEN_MECHANISM should be CK_UNAVAILABLE_INFORMATION.
 - The key is not CKA_NEVER_EXTRACTABLE.
 - The key is not CKA_ALWAYS_SENSITIVE.

Noticed by the demo version of the Cryptosense PKCS#11 compliance
test tool.
---
 chaps/object_policy_key.cc         |  4 ++--
 chaps/object_policy_private_key.cc | 11 +++++++++--
 chaps/object_policy_secret_key.cc  | 11 +++++++++--
 3 files changed, 20 insertions(+), 6 deletions(-)

diff --git a/chaps/object_policy_key.cc b/chaps/object_policy_key.cc
index e76d615..2d3f03a 100644
--- a/chaps/object_policy_key.cc
+++ b/chaps/object_policy_key.cc
@@ -44,8 +44,8 @@ void ObjectPolicyKey::SetDefaultAttributes() {
   if (!object_->IsAttributePresent(CKA_LOCAL))
     object_->SetAttributeBool(CKA_LOCAL, false);
   if (!object_->IsAttributePresent(CKA_KEY_GEN_MECHANISM))
-    object_->SetAttributeBool(CKA_KEY_GEN_MECHANISM,
-                              CK_UNAVAILABLE_INFORMATION);
+    object_->SetAttributeInt(CKA_KEY_GEN_MECHANISM,
+                             static_cast<int>(CK_UNAVAILABLE_INFORMATION));
 }
 
 }  // namespace chaps
diff --git a/chaps/object_policy_private_key.cc b/chaps/object_policy_private_key.cc
index 1d338ba..d61dc1c 100644
--- a/chaps/object_policy_private_key.cc
+++ b/chaps/object_policy_private_key.cc
@@ -76,10 +76,17 @@ void ObjectPolicyPrivateKey::SetDefaultAttributes() {
   if (!object_->IsAttributePresent(CKA_ALWAYS_AUTHENTICATE))
     object_->SetAttributeBool(CKA_ALWAYS_AUTHENTICATE, false);
   if (object_->GetStage() == kCreate) {
+    CK_ULONG mechanism = object_->GetAttributeInt(CKA_KEY_GEN_MECHANISM,
+                                                  static_cast<int>(CK_UNAVAILABLE_INFORMATION));
+    bool unknown_provenance = (mechanism == CK_UNAVAILABLE_INFORMATION);
     if (object_->GetAttributeBool(CKA_SENSITIVE, false))
-      object_->SetAttributeBool(CKA_ALWAYS_SENSITIVE, true);
+      object_->SetAttributeBool(CKA_ALWAYS_SENSITIVE, !unknown_provenance);
+    else
+      object_->SetAttributeBool(CKA_ALWAYS_SENSITIVE, false);
     if (!object_->GetAttributeBool(CKA_EXTRACTABLE, true))
-      object_->SetAttributeBool(CKA_NEVER_EXTRACTABLE, true);
+      object_->SetAttributeBool(CKA_NEVER_EXTRACTABLE, !unknown_provenance);
+    else
+      object_->SetAttributeBool(CKA_NEVER_EXTRACTABLE, false);
   }
 }
 
diff --git a/chaps/object_policy_secret_key.cc b/chaps/object_policy_secret_key.cc
index a03b343..1511f71 100644
--- a/chaps/object_policy_secret_key.cc
+++ b/chaps/object_policy_secret_key.cc
@@ -54,10 +54,17 @@ void ObjectPolicySecretKey::SetDefaultAttributes() {
   if (!object_->IsAttributePresent(CKA_WRAP_WITH_TRUSTED))
     object_->SetAttributeBool(CKA_WRAP_WITH_TRUSTED, false);
   if (object_->GetStage() == kCreate) {
+    CK_ULONG mechanism = object_->GetAttributeInt(CKA_KEY_GEN_MECHANISM,
+                                                  static_cast<int>(CK_UNAVAILABLE_INFORMATION));
+    bool unknown_provenance = (mechanism == CK_UNAVAILABLE_INFORMATION);
     if (object_->GetAttributeBool(CKA_SENSITIVE, false))
-      object_->SetAttributeBool(CKA_ALWAYS_SENSITIVE, true);
+      object_->SetAttributeBool(CKA_ALWAYS_SENSITIVE, !unknown_provenance);
+    else
+      object_->SetAttributeBool(CKA_ALWAYS_SENSITIVE, false);
     if (!object_->GetAttributeBool(CKA_EXTRACTABLE, true))
-      object_->SetAttributeBool(CKA_NEVER_EXTRACTABLE, true);
+      object_->SetAttributeBool(CKA_NEVER_EXTRACTABLE, !unknown_provenance);
+    else
+      object_->SetAttributeBool(CKA_NEVER_EXTRACTABLE, false);
   }
 }
 
-- 
1.9.1

