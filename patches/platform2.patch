From 13c6564493bdbdd205673913f2e8f058c616de43 Mon Sep 17 00:00:00 2001
From: David Drysdale <drysdale@google.com>
Date: Fri, 12 Sep 2014 10:32:19 +0100
Subject: [PATCH] Updates for standalone Linux Chaps build

 - Pass through BASE_VER to preprocessor
 - Turn on exception support, needed for D-Bus C++ library
 - Turn on new NO_DBUS_ACQUIRE_NAME flag
 - Protect against bad argument to C_GetInfo
 - Downgrade excessive logs
 - Reinstate D-Bus service file org.chromium.Chaps.service
 - DBus::Connection::acquire_name does not exist in the upstream version
   of libdbus-c++, so stick to the original request_name use on Linux
 - Disable :memory: tests if libmemenv not present.
 - Return CKR_BUFFER_TOO_SMALL if a buffer was provided by the user.
---
 chaps/Makefile                   | 6 +++++-
 chaps/chaps.cc                   | 3 ++-
 chaps/chaps_adaptor.cc           | 4 ++++
 chaps/chaps_proxy.cc             | 2 +-
 chaps/isolate_linux.cc           | 2 +-
 chaps/object_store_test.cc       | 2 ++
 chaps/org.chromium.Chaps.service | 4 ++++
 7 files changed, 19 insertions(+), 4 deletions(-)
 create mode 100644 chaps/org.chromium.Chaps.service

diff --git a/chaps/Makefile b/chaps/Makefile
index ad55a06..f4aaf1a 100644
--- a/chaps/Makefile
+++ b/chaps/Makefile
@@ -34,7 +34,7 @@ PC_DEPS = dbus-c++-1 protobuf-lite openssl \
 PC_CFLAGS := $(shell $(PKG_CONFIG) --cflags $(PC_DEPS))
 PC_LIBS := $(shell $(PKG_CONFIG) --libs $(PC_DEPS))
 
-CXXFLAGS += -I$(SRC)/.. -I$(OUT) $(PC_CFLAGS) -DNDEBUG -std=gnu++11
+CXXFLAGS += -I$(SRC)/.. -I$(OUT) $(PC_CFLAGS) -DNDEBUG -std=gnu++11 -fexceptions -DBASE_VER=$(BASE_VER)
 LDLIBS += $(PC_LIBS)
 
 # Test if libmemenv is available, and whether libsnappy is required to
@@ -127,9 +127,13 @@ all: CXX_BINARY(chapsd)
 # Chaps DBus Configuration
 ifeq ($(LINUX_BUILD),1)
 DBUS_POLICY = "context=\"default\""
+DBUS_FLAGS = -DNO_DBUS_ACQUIRE_NAME
 else
 DBUS_POLICY = "group=\"pkcs11\""
+DBUS_FLAGS =
 endif
+CXXFLAGS += $(DBUS_FLAGS)
+
 .PHONY: $(OUT)/org.chromium.Chaps.conf
 $(OUT)/org.chromium.Chaps.conf :
 	sed -e "s/@POLICY_PERMISSIONS@/$(DBUS_POLICY)/" \
diff --git a/chaps/chaps.cc b/chaps/chaps.cc
index 077323d..60abdf9 100644
--- a/chaps/chaps.cc
+++ b/chaps/chaps.cc
@@ -76,7 +76,7 @@ static CK_RV HandlePKCS11Output(CK_RV result,
     memcpy(out_buffer, &output.front(), output.size());
   } else {
     *out_buffer_length = static_cast<CK_ULONG>(output_length);
-    if (result == CKR_BUFFER_TOO_SMALL)
+    if (result == CKR_BUFFER_TOO_SMALL && !out_buffer)
       result = CKR_OK;
   }
   return result;
@@ -183,6 +183,7 @@ CK_RV C_GetInfo(CK_INFO_PTR pInfo) {
 
 // PKCS #11 v2.20 section 11.4 page 106.
 CK_RV C_GetFunctionList(CK_FUNCTION_LIST_PTR_PTR ppFunctionList) {
+  LOG_CK_RV_AND_RETURN_IF(!ppFunctionList, CKR_ARGUMENTS_BAD);
   static CK_VERSION version = {2, 20};
   static CK_FUNCTION_LIST functionList = {
     version,
diff --git a/chaps/chaps_adaptor.cc b/chaps/chaps_adaptor.cc
index 3e02d24..7f3eb2b 100644
--- a/chaps/chaps_adaptor.cc
+++ b/chaps/chaps_adaptor.cc
@@ -25,7 +25,11 @@ namespace chaps {
 // Helper used when calling the ObjectAdaptor constructor.
 static DBus::Connection& GetConnection() {
   static DBus::Connection connection = DBus::Connection::SystemBus();
+#ifdef NO_DBUS_ACQUIRE_NAME
+  connection.request_name(kChapsServiceName);
+#else
   CHECK(connection.acquire_name(kChapsServiceName));
+#endif
   return connection;
 }
 
diff --git a/chaps/chaps_proxy.cc b/chaps/chaps_proxy.cc
index 42163a3..f950234 100644
--- a/chaps/chaps_proxy.cc
+++ b/chaps/chaps_proxy.cc
@@ -38,7 +38,7 @@ bool ChapsProxyImpl::Init() {
     if (proxy_.get()) {
       if (!WaitForService())
         return false;
-      LOG(INFO) << "Chaps proxy initialized (" << kChapsServicePath << ").";
+      VLOG(1) << "Chaps proxy initialized (" << kChapsServicePath << ").";
       return true;
     }
   } catch (DBus::Error err) {
diff --git a/chaps/isolate_linux.cc b/chaps/isolate_linux.cc
index 6be57c9..e91b725 100644
--- a/chaps/isolate_linux.cc
+++ b/chaps/isolate_linux.cc
@@ -60,7 +60,7 @@ bool IsolateCredentialManager::GetUserIsolateCredential(
   const FilePath credential_file = FilePath(kIsolateFilePath).Append(user);
   if (!base::PathExists(credential_file) ||
       !base::ReadFileToString(credential_file, &credential_string)) {
-    LOG(INFO) << "Failed to find or read isolate credential for user "
+    VLOG(1) << "Failed to find or read isolate credential for user "
                << user;
     return false;
   }
diff --git a/chaps/object_store_test.cc b/chaps/object_store_test.cc
index 30aafdf..f5d1298 100644
--- a/chaps/object_store_test.cc
+++ b/chaps/object_store_test.cc
@@ -120,6 +120,7 @@ TEST_F(TestObjectStoreEncryption, CBCMode) {
   EXPECT_FALSE(encrypted_block1 == encrypted_block2);
 }
 
+#ifndef NO_MEMENV
 TEST(TestObjectStore, InsertLoad) {
   ObjectStoreImpl store;
   const FilePath::CharType database[] = FILE_PATH_LITERAL(":memory:");
@@ -224,6 +225,7 @@ TEST(TestObjectStore, DeleteAll) {
   EXPECT_TRUE(store.GetInternalBlob(1, &internal));
   EXPECT_EQ("internal", internal);
 }
+#endif
 
 }  // namespace chaps
 
diff --git a/chaps/org.chromium.Chaps.service b/chaps/org.chromium.Chaps.service
new file mode 100644
index 0000000..10cf47e
--- /dev/null
+++ b/chaps/org.chromium.Chaps.service
@@ -0,0 +1,4 @@
+[D-BUS Service]
+Name=org.chromium.Chaps
+Exec=/usr/sbin/chapsd
+User=root
-- 
1.9.1

