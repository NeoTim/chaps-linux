From ce6815989d4c1047b94e096d112be51e66f2f49c Mon Sep 17 00:00:00 2001
From: David Drysdale <drysdale@google.com>
Date: Thu, 2 Oct 2014 12:02:08 +0100
Subject: [PATCH 4/9] chaps: Downgrade excessive logs

Respect the PAM_SILENT flag, and downgrade logs that occur in
normal situations.  In particular, PAM sessions can be opened
without a prior call to authenticate, leading to the user name
being unavailable.

BUG=None
TEST=Chaps unit tests (with ASAN) plus PKCS11 tests

Change-Id: Id617d091f34ef61dd454599dd61315f02f2cbbea
---
 chaps/chaps_pam_module.cc | 5 +++++
 chaps/chaps_proxy.cc      | 2 +-
 chaps/isolate_linux.cc    | 2 +-
 chaps/pam_helper.cc       | 2 +-
 4 files changed, 8 insertions(+), 3 deletions(-)

diff --git a/chaps/chaps_pam_module.cc b/chaps/chaps_pam_module.cc
index 073f37702fc6..ed6a125d0ec4 100644
--- a/chaps/chaps_pam_module.cc
+++ b/chaps/chaps_pam_module.cc
@@ -102,6 +102,9 @@ static bool Init() {
 
 PAM_EXPORT_SPEC int pam_sm_authenticate(pam_handle_t* pam_handle, int flags,
                                         int argc, const char** argv) {
+  logging::SetMinLogLevel((flags & PAM_SILENT) ?
+                          logging::LOG_FATAL : logging::LOG_INFO);
+
   if (!Init())
     return PAM_SERVICE_ERR;
 
@@ -121,6 +124,8 @@ PAM_EXPORT_SPEC int pam_sm_authenticate(pam_handle_t* pam_handle, int flags,
 
 PAM_EXPORT_SPEC int pam_sm_open_session(pam_handle_t* pam_handle, int flags,
                                         int argc, const char** argv) {
+  logging::SetMinLogLevel((flags & PAM_SILENT) ?
+                          logging::LOG_FATAL : logging::LOG_INFO);
   if (!Init())
     return PAM_SERVICE_ERR;
 
diff --git a/chaps/chaps_proxy.cc b/chaps/chaps_proxy.cc
index 42163a32c32c..f950234603fa 100644
--- a/chaps/chaps_proxy.cc
+++ b/chaps/chaps_proxy.cc
@@ -38,7 +38,7 @@ bool ChapsProxyImpl::Init() {
     if (proxy_.get()) {
       if (!WaitForService())
         return false;
-      LOG(INFO) << "Chaps proxy initialized (" << kChapsServicePath << ").";
+      VLOG(1) << "Chaps proxy initialized (" << kChapsServicePath << ").";
       return true;
     }
   } catch (DBus::Error err) {
diff --git a/chaps/isolate_linux.cc b/chaps/isolate_linux.cc
index 6be57c9bb165..b1b91750690d 100644
--- a/chaps/isolate_linux.cc
+++ b/chaps/isolate_linux.cc
@@ -61,7 +61,7 @@ bool IsolateCredentialManager::GetUserIsolateCredential(
   if (!base::PathExists(credential_file) ||
       !base::ReadFileToString(credential_file, &credential_string)) {
     LOG(INFO) << "Failed to find or read isolate credential for user "
-               << user;
+              << user;
     return false;
   }
   const SecureBlob new_isolate_credential(credential_string);
diff --git a/chaps/pam_helper.cc b/chaps/pam_helper.cc
index fa19bd28e24f..cac9d790212a 100644
--- a/chaps/pam_helper.cc
+++ b/chaps/pam_helper.cc
@@ -116,7 +116,7 @@ bool PamHelper::RetrieveUserAndPassword(pam_handle_t* pam_handle,
 
   const void* user_data;
   if (pam_get_data(pam_handle, kUserKey, &user_data) != PAM_SUCCESS) {
-    LOG(INFO) << "Could not retrieve user name from PAM handle";
+    VLOG(1) << "Could not retrieve user name from PAM handle";
     return false;
   }
   *user = *reinterpret_cast<const string*>(user_data);
-- 
2.1.0.rc2.206.gedb03e5

